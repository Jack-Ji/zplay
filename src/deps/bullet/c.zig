pub const CbtVector3 = [3]f32;
pub const struct_CbtWorldHandle__ = extern struct {
    unused: c_int,
};
pub const CbtWorldHandle = [*c]struct_CbtWorldHandle__;
pub const struct_CbtShapeHandle__ = extern struct {
    unused: c_int,
};
pub const CbtShapeHandle = [*c]struct_CbtShapeHandle__;
pub const struct_CbtBodyHandle__ = extern struct {
    unused: c_int,
};
pub const CbtBodyHandle = [*c]struct_CbtBodyHandle__;
pub const struct_CbtConstraintHandle__ = extern struct {
    unused: c_int,
};
pub const CbtConstraintHandle = [*c]struct_CbtConstraintHandle__;
pub const CbtDrawLine1Callback = ?fn ([*c]const f32, [*c]const f32, [*c]const f32, ?*anyopaque) callconv(.C) void;
pub const CbtDrawLine2Callback = ?fn ([*c]const f32, [*c]const f32, [*c]const f32, [*c]const f32, ?*anyopaque) callconv(.C) void;
pub const CbtDrawContactPointCallback = ?fn ([*c]const f32, [*c]const f32, f32, c_int, [*c]const f32, ?*anyopaque) callconv(.C) void;
pub const CbtReportErrorWarningCallback = ?fn ([*c]const u8, ?*anyopaque) callconv(.C) void;
pub const struct_CbtDebugDrawCallbacks = extern struct {
    drawLine1: CbtDrawLine1Callback,
    drawLine2: CbtDrawLine2Callback,
    drawContactPoint: CbtDrawContactPointCallback,
    reportErrorWarning: CbtReportErrorWarningCallback,
    user_data: ?*anyopaque,
};
pub const CbtDebugDrawCallbacks = struct_CbtDebugDrawCallbacks;
pub const struct_CbtRayCastResult = extern struct {
    hit_normal_world: CbtVector3,
    hit_point_world: CbtVector3,
    hit_fraction: f32,
    body: CbtBodyHandle,
};
pub const CbtRayCastResult = struct_CbtRayCastResult;
pub extern fn cbtWorldCreate() CbtWorldHandle;
pub extern fn cbtWorldDestroy(world_handle: CbtWorldHandle) void;
pub extern fn cbtWorldSetGravity(world_handle: CbtWorldHandle, gravity: [*c]const f32) void;
pub extern fn cbtWorldGetGravity(world_handle: CbtWorldHandle, gravity: [*c]f32) void;
pub extern fn cbtWorldStepSimulation(world_handle: CbtWorldHandle, time_step: f32, max_sub_steps: c_int, fixed_time_step: f32) c_int;
pub extern fn cbtWorldAddBody(world_handle: CbtWorldHandle, body_handle: CbtBodyHandle) void;
pub extern fn cbtWorldAddConstraint(world_handle: CbtWorldHandle, con_handle: CbtConstraintHandle, disable_collision_between_linked_bodies: bool) void;
pub extern fn cbtWorldRemoveBody(world_handle: CbtWorldHandle, body_handle: CbtBodyHandle) void;
pub extern fn cbtWorldRemoveConstraint(world_handle: CbtWorldHandle, constraint_handle: CbtConstraintHandle) void;
pub extern fn cbtWorldGetNumBodies(world_handle: CbtWorldHandle) c_int;
pub extern fn cbtWorldGetNumConstraints(world_handle: CbtWorldHandle) c_int;
pub extern fn cbtWorldGetBody(world_handle: CbtWorldHandle, body_index: c_int) CbtBodyHandle;
pub extern fn cbtWorldGetConstraint(world_handle: CbtWorldHandle, con_index: c_int) CbtConstraintHandle;
pub extern fn cbtRayTestClosest(world_handle: CbtWorldHandle, ray_from_world: [*c]const f32, ray_to_world: [*c]const f32, collision_filter_group: c_int, collision_filter_mask: c_int, flags: c_uint, result: [*c]CbtRayCastResult) bool;
pub extern fn cbtWorldDebugSetCallbacks(world_handle: CbtWorldHandle, callbacks: [*c]const CbtDebugDrawCallbacks) void;
pub extern fn cbtWorldDebugDraw(world_handle: CbtWorldHandle) void;
pub extern fn cbtWorldDebugDrawLine1(world_handle: CbtWorldHandle, p0: [*c]const f32, p1: [*c]const f32, color: [*c]const f32) void;
pub extern fn cbtWorldDebugDrawLine2(world_handle: CbtWorldHandle, p0: [*c]const f32, p1: [*c]const f32, color0: [*c]const f32, color1: [*c]const f32) void;
pub extern fn cbtWorldDebugDrawSphere(world_handle: CbtWorldHandle, position: [*c]const f32, radius: f32, color: [*c]const f32) void;
pub extern fn cbtShapeAllocate(shape_type: c_int) CbtShapeHandle;
pub extern fn cbtShapeDeallocate(shape_handle: CbtShapeHandle) void;
pub extern fn cbtShapeDestroy(shape_handle: CbtShapeHandle) void;
pub extern fn cbtShapeIsCreated(shape_handle: CbtShapeHandle) bool;
pub extern fn cbtShapeGetType(shape_handle: CbtShapeHandle) c_int;
pub extern fn cbtShapeSetMargin(shape_handle: CbtShapeHandle, margin: f32) void;
pub extern fn cbtShapeGetMargin(shape_handle: CbtShapeHandle) f32;
pub extern fn cbtShapeIsPolyhedral(shape_handle: CbtShapeHandle) bool;
pub extern fn cbtShapeIsConvex2d(shape_handle: CbtShapeHandle) bool;
pub extern fn cbtShapeIsConvex(shape_handle: CbtShapeHandle) bool;
pub extern fn cbtShapeIsNonMoving(shape_handle: CbtShapeHandle) bool;
pub extern fn cbtShapeIsConcave(shape_handle: CbtShapeHandle) bool;
pub extern fn cbtShapeIsCompound(shape_handle: CbtShapeHandle) bool;
pub extern fn cbtShapeCalculateLocalInertia(shape_handle: CbtShapeHandle, mass: f32, inertia: [*c]f32) void;
pub extern fn cbtShapeSetUserPointer(shape_handle: CbtShapeHandle, user_pointer: ?*anyopaque) void;
pub extern fn cbtShapeGetUserPointer(shape_handle: CbtShapeHandle) ?*anyopaque;
pub extern fn cbtShapeSetUserIndex(shape_handle: CbtShapeHandle, slot: c_int, user_index: c_int) void;
pub extern fn cbtShapeGetUserIndex(shape_handle: CbtShapeHandle, slot: c_int) c_int;
pub extern fn cbtShapeBoxCreate(shape_handle: CbtShapeHandle, half_extents: [*c]const f32) void;
pub extern fn cbtShapeBoxGetHalfExtentsWithoutMargin(shape_handle: CbtShapeHandle, half_extents: [*c]f32) void;
pub extern fn cbtShapeBoxGetHalfExtentsWithMargin(shape_handle: CbtShapeHandle, half_extents: [*c]f32) void;
pub extern fn cbtShapeSphereCreate(shape_handle: CbtShapeHandle, radius: f32) void;
pub extern fn cbtShapeSphereSetUnscaledRadius(shape_handle: CbtShapeHandle, radius: f32) void;
pub extern fn cbtShapeSphereGetRadius(shape_handle: CbtShapeHandle) f32;
pub extern fn cbtShapeCapsuleCreate(shape_handle: CbtShapeHandle, radius: f32, height: f32, up_axis: c_int) void;
pub extern fn cbtShapeCapsuleGetUpAxis(shape_handle: CbtShapeHandle) c_int;
pub extern fn cbtShapeCapsuleGetHalfHeight(shape_handle: CbtShapeHandle) f32;
pub extern fn cbtShapeCapsuleGetRadius(shape_handle: CbtShapeHandle) f32;
pub extern fn cbtShapeCylinderCreate(shape_handle: CbtShapeHandle, half_extents: [*c]const f32, up_axis: c_int) void;
pub extern fn cbtShapeCylinderGetHalfExtentsWithoutMargin(shape_handle: CbtShapeHandle, half_extents: [*c]f32) void;
pub extern fn cbtShapeCylinderGetHalfExtentsWithMargin(shape_handle: CbtShapeHandle, half_extents: [*c]f32) void;
pub extern fn cbtShapeCylinderGetUpAxis(shape_handle: CbtShapeHandle) c_int;
pub extern fn cbtShapeConeCreate(shape_handle: CbtShapeHandle, radius: f32, height: f32, up_axis: c_int) void;
pub extern fn cbtShapeConeGetRadius(shape_handle: CbtShapeHandle) f32;
pub extern fn cbtShapeConeGetHeight(shape_handle: CbtShapeHandle) f32;
pub extern fn cbtShapeConeGetUpAxis(shape_handle: CbtShapeHandle) c_int;
pub extern fn cbtShapeCompoundCreate(shape_handle: CbtShapeHandle, enable_dynamic_aabb_tree: bool, initial_child_capacity: c_int) void;
pub extern fn cbtShapeCompoundAddChild(shape_handle: CbtShapeHandle, local_transform: [*c]const CbtVector3, child_shape_handle: CbtShapeHandle) void;
pub extern fn cbtShapeCompoundRemoveChild(shape_handle: CbtShapeHandle, child_shape_handle: CbtShapeHandle) void;
pub extern fn cbtShapeCompoundRemoveChildByIndex(shape_handle: CbtShapeHandle, child_shape_index: c_int) void;
pub extern fn cbtShapeCompoundGetNumChilds(shape_handle: CbtShapeHandle) c_int;
pub extern fn cbtShapeCompoundGetChild(shape_handle: CbtShapeHandle, child_shape_index: c_int) CbtShapeHandle;
pub extern fn cbtShapeCompoundGetChildTransform(shape_handle: CbtShapeHandle, child_shape_index: c_int, transform: [*c]CbtVector3) void;
pub extern fn cbtShapeTriMeshCreateBegin(shape_handle: CbtShapeHandle) void;
pub extern fn cbtShapeTriMeshCreateEnd(shape_handle: CbtShapeHandle) void;
pub extern fn cbtShapeTriMeshDestroy(shape_handle: CbtShapeHandle) void;
pub extern fn cbtShapeTriMeshAddIndexVertexArray(shape_handle: CbtShapeHandle, num_triangles: c_int, triangle_base: ?*const anyopaque, triangle_stride: c_int, num_vertices: c_int, vertex_base: ?*const anyopaque, vertex_stride: c_int) void;
pub extern fn cbtBodyAllocate() CbtBodyHandle;
pub extern fn cbtBodyAllocateBatch(num: c_uint, body_handles: [*c]CbtBodyHandle) void;
pub extern fn cbtBodyDeallocate(body_handle: CbtBodyHandle) void;
pub extern fn cbtBodyDeallocateBatch(num: c_uint, body_handles: [*c]CbtBodyHandle) void;
pub extern fn cbtBodyCreate(body_handle: CbtBodyHandle, mass: f32, transform: [*c]const CbtVector3, shape_handle: CbtShapeHandle) void;
pub extern fn cbtBodyDestroy(body_handle: CbtBodyHandle) void;
pub extern fn cbtBodyIsCreated(body_handle: CbtBodyHandle) bool;
pub extern fn cbtBodySetShape(body_handle: CbtBodyHandle, shape_handle: CbtShapeHandle) void;
pub extern fn cbtBodyGetShape(body_handle: CbtBodyHandle) CbtShapeHandle;
pub extern fn cbtBodySetRestitution(body_handle: CbtBodyHandle, restitution: f32) void;
pub extern fn cbtBodySetFriction(body_handle: CbtBodyHandle, friction: f32) void;
pub extern fn cbtBodySetRollingFriction(body_handle: CbtBodyHandle, friction: f32) void;
pub extern fn cbtBodySetSpinningFriction(body_handle: CbtBodyHandle, friction: f32) void;
pub extern fn cbtBodySetAnisotropicFriction(body_handle: CbtBodyHandle, friction: [*c]const f32, mode: c_int) void;
pub extern fn cbtBodySetContactStiffnessAndDamping(body_handle: CbtBodyHandle, stiffness: f32, damping: f32) void;
pub extern fn cbtBodySetMassProps(body_handle: CbtBodyHandle, mass: f32, inertia: [*c]const f32) void;
pub extern fn cbtBodySetDamping(body_handle: CbtBodyHandle, linear: f32, angular: f32) void;
pub extern fn cbtBodySetLinearVelocity(body_handle: CbtBodyHandle, velocity: [*c]const f32) void;
pub extern fn cbtBodySetAngularVelocity(body_handle: CbtBodyHandle, velocity: [*c]const f32) void;
pub extern fn cbtBodySetLinearFactor(body_handle: CbtBodyHandle, factor: [*c]const f32) void;
pub extern fn cbtBodySetAngularFactor(body_handle: CbtBodyHandle, factor: [*c]const f32) void;
pub extern fn cbtBodySetGravity(body_handle: CbtBodyHandle, gravity: [*c]const f32) void;
pub extern fn cbtBodyGetGravity(body_handle: CbtBodyHandle, gravity: [*c]f32) void;
pub extern fn cbtBodyGetNumConstraints(body_handle: CbtBodyHandle) c_int;
pub extern fn cbtBodyGetConstraint(body_handle: CbtBodyHandle, index: c_int) CbtConstraintHandle;
pub extern fn cbtBodyApplyCentralForce(body_handle: CbtBodyHandle, force: [*c]const f32) void;
pub extern fn cbtBodyApplyCentralImpulse(body_handle: CbtBodyHandle, impulse: [*c]const f32) void;
pub extern fn cbtBodyApplyForce(body_handle: CbtBodyHandle, force: [*c]const f32, rel_pos: [*c]const f32) void;
pub extern fn cbtBodyApplyImpulse(body_handle: CbtBodyHandle, impulse: [*c]const f32, rel_pos: [*c]const f32) void;
pub extern fn cbtBodyApplyTorque(body_handle: CbtBodyHandle, torque: [*c]const f32) void;
pub extern fn cbtBodyApplyTorqueImpulse(body_handle: CbtBodyHandle, impulse: [*c]const f32) void;
pub extern fn cbtBodyGetRestitution(body_handle: CbtBodyHandle) f32;
pub extern fn cbtBodyGetFriction(body_handle: CbtBodyHandle) f32;
pub extern fn cbtBodyGetRollingFriction(body_handle: CbtBodyHandle) f32;
pub extern fn cbtBodyGetSpinningFriction(body_handle: CbtBodyHandle) f32;
pub extern fn cbtBodyGetAnisotropicFriction(body_handle: CbtBodyHandle, friction: [*c]f32) void;
pub extern fn cbtBodyGetContactStiffness(body_handle: CbtBodyHandle) f32;
pub extern fn cbtBodyGetContactDamping(body_handle: CbtBodyHandle) f32;
pub extern fn cbtBodyGetMass(body_handle: CbtBodyHandle) f32;
pub extern fn cbtBodyGetLinearDamping(body_handle: CbtBodyHandle) f32;
pub extern fn cbtBodyGetAngularDamping(body_handle: CbtBodyHandle) f32;
pub extern fn cbtBodyGetLinearVelocity(body_handle: CbtBodyHandle, velocity: [*c]f32) void;
pub extern fn cbtBodyGetAngularVelocity(body_handle: CbtBodyHandle, velocity: [*c]f32) void;
pub extern fn cbtBodyGetTotalForce(body_handle: CbtBodyHandle, force: [*c]f32) void;
pub extern fn cbtBodyGetTotalTorque(body_handle: CbtBodyHandle, torque: [*c]f32) void;
pub extern fn cbtBodyIsStatic(body_handle: CbtBodyHandle) bool;
pub extern fn cbtBodyIsKinematic(body_handle: CbtBodyHandle) bool;
pub extern fn cbtBodyIsStaticOrKinematic(body_handle: CbtBodyHandle) bool;
pub extern fn cbtBodyGetDeactivationTime(body_handle: CbtBodyHandle) f32;
pub extern fn cbtBodySetDeactivationTime(body_handle: CbtBodyHandle, time: f32) void;
pub extern fn cbtBodyGetActivationState(body_handle: CbtBodyHandle) c_int;
pub extern fn cbtBodySetActivationState(body_handle: CbtBodyHandle, state: c_int) void;
pub extern fn cbtBodyForceActivationState(body_handle: CbtBodyHandle, state: c_int) void;
pub extern fn cbtBodyIsActive(body_handle: CbtBodyHandle) bool;
pub extern fn cbtBodyIsInWorld(body_handle: CbtBodyHandle) bool;
pub extern fn cbtBodySetUserPointer(body_handle: CbtBodyHandle, user_pointer: ?*anyopaque) void;
pub extern fn cbtBodyGetUserPointer(body_handle: CbtBodyHandle) ?*anyopaque;
pub extern fn cbtBodySetUserIndex(body_handle: CbtBodyHandle, slot: c_int, user_index: c_int) void;
pub extern fn cbtBodyGetUserIndex(body_handle: CbtBodyHandle, slot: c_int) c_int;
pub extern fn cbtBodySetCenterOfMassTransform(body_handle: CbtBodyHandle, transform: [*c]const CbtVector3) void;
pub extern fn cbtBodyGetCenterOfMassTransform(body_handle: CbtBodyHandle, transform: [*c]CbtVector3) void;
pub extern fn cbtBodyGetCenterOfMassPosition(body_handle: CbtBodyHandle, position: [*c]f32) void;
pub extern fn cbtBodyGetInvCenterOfMassTransform(body_handle: CbtBodyHandle, transform: [*c]CbtVector3) void;
pub extern fn cbtBodyGetGraphicsWorldTransform(body_handle: CbtBodyHandle, transform: [*c]CbtVector3) void;
pub extern fn cbtConGetFixedBody() CbtBodyHandle;
pub extern fn cbtConAllocate(con_type: c_int) CbtConstraintHandle;
pub extern fn cbtConDeallocate(con_handle: CbtConstraintHandle) void;
pub extern fn cbtConDestroy(con_handle: CbtConstraintHandle) void;
pub extern fn cbtConIsCreated(con_handle: CbtConstraintHandle) bool;
pub extern fn cbtConGetType(con_handle: CbtConstraintHandle) c_int;
pub extern fn cbtConSetParam(con_handle: CbtConstraintHandle, param: c_int, value: f32, axis: c_int) void;
pub extern fn cbtConGetParam(con_handle: CbtConstraintHandle, param: c_int, axis: c_int) f32;
pub extern fn cbtConSetEnabled(con_handle: CbtConstraintHandle, enabled: bool) void;
pub extern fn cbtConIsEnabled(con_handle: CbtConstraintHandle) bool;
pub extern fn cbtConGetBodyA(con_handle: CbtConstraintHandle) CbtBodyHandle;
pub extern fn cbtConGetBodyB(con_handle: CbtConstraintHandle) CbtBodyHandle;
pub extern fn cbtConSetBreakingImpulseThreshold(con_handle: CbtConstraintHandle, threshold: f32) void;
pub extern fn cbtConGetBreakingImpulseThreshold(con_handle: CbtConstraintHandle) f32;
pub extern fn cbtConSetDebugDrawSize(con_handle: CbtConstraintHandle, size: f32) void;
pub extern fn cbtConGetDebugDrawSize(con_handle: CbtConstraintHandle) f32;
pub extern fn cbtConPoint2PointCreate1(con_handle: CbtConstraintHandle, body_handle_a: CbtBodyHandle, pivot_a: [*c]const f32) void;
pub extern fn cbtConPoint2PointCreate2(con_handle: CbtConstraintHandle, body_handle_a: CbtBodyHandle, body_handle_b: CbtBodyHandle, pivot_a: [*c]const f32, pivot_b: [*c]const f32) void;
pub extern fn cbtConPoint2PointSetPivotA(con_handle: CbtConstraintHandle, pivot: [*c]const f32) void;
pub extern fn cbtConPoint2PointSetPivotB(con_handle: CbtConstraintHandle, pivot: [*c]const f32) void;
pub extern fn cbtConPoint2PointSetTau(con_handle: CbtConstraintHandle, tau: f32) void;
pub extern fn cbtConPoint2PointSetDamping(con_handle: CbtConstraintHandle, damping: f32) void;
pub extern fn cbtConPoint2PointSetImpulseClamp(con_handle: CbtConstraintHandle, impulse_clamp: f32) void;
pub extern fn cbtConPoint2PointGetPivotA(con_handle: CbtConstraintHandle, pivot: [*c]f32) void;
pub extern fn cbtConPoint2PointGetPivotB(con_handle: CbtConstraintHandle, pivot: [*c]f32) void;
pub extern fn cbtConHingeCreate1(con_handle: CbtConstraintHandle, body_handle_a: CbtBodyHandle, pivot_a: [*c]const f32, axis_a: [*c]const f32, use_reference_frame_a: bool) void;
pub extern fn cbtConHingeCreate2(con_handle: CbtConstraintHandle, body_handle_a: CbtBodyHandle, body_handle_b: CbtBodyHandle, pivot_a: [*c]const f32, pivot_b: [*c]const f32, axis_a: [*c]const f32, axis_b: [*c]const f32, use_reference_frame_a: bool) void;
pub extern fn cbtConHingeCreate3(con_handle: CbtConstraintHandle, body_handle_a: CbtBodyHandle, frame_a: [*c]const CbtVector3, use_reference_frame_a: bool) void;
pub extern fn cbtConHingeSetAngularOnly(con_handle: CbtConstraintHandle, angular_only: bool) void;
pub extern fn cbtConHingeEnableAngularMotor(con_handle: CbtConstraintHandle, enable: bool, target_velocity: f32, max_motor_impulse: f32) void;
pub extern fn cbtConHingeSetLimit(con_handle: CbtConstraintHandle, low: f32, high: f32, softness: f32, bias_factor: f32, relaxation_factor: f32) void;
pub extern fn cbtConGearCreate(con_handle: CbtConstraintHandle, body_handle_a: CbtBodyHandle, body_handle_b: CbtBodyHandle, axis_a: [*c]const f32, axis_b: [*c]const f32, ratio: f32) void;
pub extern fn cbtConGearSetAxisA(con_handle: CbtConstraintHandle, axis: [*c]const f32) void;
pub extern fn cbtConGearSetAxisB(con_handle: CbtConstraintHandle, axis: [*c]const f32) void;
pub extern fn cbtConGearSetRatio(con_handle: CbtConstraintHandle, ratio: f32) void;
pub extern fn cbtConGearGetAxisA(con_handle: CbtConstraintHandle, axis: [*c]f32) void;
pub extern fn cbtConGearGetAxisB(con_handle: CbtConstraintHandle, axis: [*c]f32) void;
pub extern fn cbtConGearGetRatio(con_handle: CbtConstraintHandle) f32;
pub extern fn cbtConSliderCreate1(con_handle: CbtConstraintHandle, body_handle_b: CbtBodyHandle, frame_b: [*c]const CbtVector3, use_reference_frame_a: bool) void;
pub extern fn cbtConSliderCreate2(con_handle: CbtConstraintHandle, body_handle_a: CbtBodyHandle, body_handle_b: CbtBodyHandle, frame_a: [*c]const CbtVector3, frame_b: [*c]const CbtVector3, use_reference_frame_a: bool) void;
pub extern fn cbtConSliderSetLinearLowerLimit(con_handle: CbtConstraintHandle, limit: f32) void;
pub extern fn cbtConSliderSetLinearUpperLimit(con_handle: CbtConstraintHandle, limit: f32) void;
pub extern fn cbtConSliderGetLinearLowerLimit(con_handle: CbtConstraintHandle) f32;
pub extern fn cbtConSliderGetLinearUpperLimit(con_handle: CbtConstraintHandle) f32;
pub extern fn cbtConSliderSetAngularLowerLimit(con_handle: CbtConstraintHandle, limit: f32) void;
pub extern fn cbtConSliderSetAngularUpperLimit(con_handle: CbtConstraintHandle, limit: f32) void;
pub extern fn cbtConSliderGetAngularLowerLimit(con_handle: CbtConstraintHandle) f32;
pub extern fn cbtConSliderGetAngularUpperLimit(con_handle: CbtConstraintHandle) f32;
pub extern fn cbtConSliderEnableLinearMotor(con_handle: CbtConstraintHandle, enable: bool, target_velocity: f32, max_motor_force: f32) void;
pub extern fn cbtConSliderEnableAngularMotor(con_handle: CbtConstraintHandle, enable: bool, target_velocity: f32, max_force: f32) void;
pub extern fn cbtConSliderIsLinearMotorEnabled(con_handle: CbtConstraintHandle) bool;
pub extern fn cbtConSliderIsAngularMotorEnabled(con_handle: CbtConstraintHandle) bool;
pub extern fn cbtConSliderGetAngularMotor(con_handle: CbtConstraintHandle, target_velocity: [*c]f32, max_force: [*c]f32) void;
pub extern fn cbtConSliderGetLinearPosition(con_handle: CbtConstraintHandle) f32;
pub extern fn cbtConSliderGetAngularPosition(con_handle: CbtConstraintHandle) f32;
pub extern fn cbtConD6Spring2Create1(con_handle: CbtConstraintHandle, body_handle_b: CbtBodyHandle, frame_b: [*c]const CbtVector3, rotate_order: c_int) void;
pub extern fn cbtConD6Spring2Create2(con_handle: CbtConstraintHandle, body_handle_a: CbtBodyHandle, body_handle_b: CbtBodyHandle, frame_a: [*c]const CbtVector3, frame_b: [*c]const CbtVector3, rotate_order: c_int) void;
pub extern fn cbtConD6Spring2SetLinearLowerLimit(con_handle: CbtConstraintHandle, limit: [*c]const f32) void;
pub extern fn cbtConD6Spring2SetLinearUpperLimit(con_handle: CbtConstraintHandle, limit: [*c]const f32) void;
pub extern fn cbtConD6Spring2GetLinearLowerLimit(con_handle: CbtConstraintHandle, limit: [*c]f32) void;
pub extern fn cbtConD6Spring2GetLinearUpperLimit(con_handle: CbtConstraintHandle, limit: [*c]f32) void;
pub extern fn cbtConD6Spring2SetAngularLowerLimit(con_handle: CbtConstraintHandle, limit: [*c]const f32) void;
pub extern fn cbtConD6Spring2SetAngularUpperLimit(con_handle: CbtConstraintHandle, limit: [*c]const f32) void;
pub extern fn cbtConD6Spring2GetAngularLowerLimit(con_handle: CbtConstraintHandle, limit: [*c]f32) void;
pub extern fn cbtConD6Spring2GetAngularUpperLimit(con_handle: CbtConstraintHandle, limit: [*c]f32) void;
pub extern fn cbtConConeTwistCreate1(con_handle: CbtConstraintHandle, body_handle_a: CbtBodyHandle, frame_a: [*c]const CbtVector3) void;
pub extern fn cbtConConeTwistCreate2(con_handle: CbtConstraintHandle, body_handle_a: CbtBodyHandle, body_handle_b: CbtBodyHandle, frame_a: [*c]const CbtVector3, frame_b: [*c]const CbtVector3) void;
pub extern fn cbtConConeTwistSetLimit(con_handle: CbtConstraintHandle, swing_span1: f32, swing_span2: f32, twist_span: f32, softness: f32, bias_factor: f32, relaxation_factor: f32) void;
pub const CBT_COLLISION_FILTER_DEFAULT = @as(c_int, 1);
pub const CBT_COLLISION_FILTER_STATIC = @as(c_int, 2);
pub const CBT_COLLISION_FILTER_KINEMATIC = @as(c_int, 4);
pub const CBT_COLLISION_FILTER_DEBRIS = @as(c_int, 8);
pub const CBT_COLLISION_FILTER_SENSOR_TRIGGER = @as(c_int, 16);
pub const CBT_COLLISION_FILTER_CHARACTER = @as(c_int, 32);
pub const CBT_COLLISION_FILTER_ALL = -@as(c_int, 1);
pub const CBT_RAYCAST_FLAG_NONE = @as(c_int, 0);
pub const CBT_RAYCAST_FLAG_TRIMESH_SKIP_BACKFACES = @as(c_int, 1);
pub const CBT_RAYCAST_FLAG_TRIMESH_KEEP_UNFLIPPED_NORMALS = @as(c_int, 2);
pub const CBT_RAYCAST_FLAG_USE_SUB_SIMPLEX_CONVEX_TEST = @as(c_int, 4);
pub const CBT_RAYCAST_FLAG_USE_USE_GJK_CONVEX_TEST = @as(c_int, 8);
pub const CBT_ANISOTROPIC_FRICTION_DISABLED = @as(c_int, 0);
pub const CBT_ANISOTROPIC_FRICTION = @as(c_int, 1);
pub const CBT_ANISOTROPIC_ROLLING_FRICTION = @as(c_int, 2);
pub const CBT_SHAPE_TYPE_BOX = @as(c_int, 0);
pub const CBT_SHAPE_TYPE_SPHERE = @as(c_int, 8);
pub const CBT_SHAPE_TYPE_CAPSULE = @as(c_int, 10);
pub const CBT_SHAPE_TYPE_CONE = @as(c_int, 11);
pub const CBT_SHAPE_TYPE_CYLINDER = @as(c_int, 13);
pub const CBT_SHAPE_TYPE_COMPOUND = @as(c_int, 31);
pub const CBT_SHAPE_TYPE_TRIANGLE_MESH = @as(c_int, 21);
pub const CBT_CONSTRAINT_TYPE_POINT2POINT = @as(c_int, 3);
pub const CBT_CONSTRAINT_TYPE_HINGE = @as(c_int, 4);
pub const CBT_CONSTRAINT_TYPE_CONETWIST = @as(c_int, 5);
pub const CBT_CONSTRAINT_TYPE_SLIDER = @as(c_int, 7);
pub const CBT_CONSTRAINT_TYPE_GEAR = @as(c_int, 10);
pub const CBT_CONSTRAINT_TYPE_D6_SPRING_2 = @as(c_int, 12);
pub const CBT_CONSTRAINT_PARAM_ERP = @as(c_int, 1);
pub const CBT_CONSTRAINT_PARAM_STOP_ERP = @as(c_int, 2);
pub const CBT_CONSTRAINT_PARAM_CFM = @as(c_int, 3);
pub const CBT_CONSTRAINT_PARAM_STOP_CFM = @as(c_int, 4);
pub const CBT_ACTIVE_TAG = @as(c_int, 1);
pub const CBT_ISLAND_SLEEPING = @as(c_int, 2);
pub const CBT_DISABLE_DEACTIVATION = @as(c_int, 4);
pub const CBT_DISABLE_SIMULATION = @as(c_int, 5);
pub const CBT_LINEAR_AXIS_X = @as(c_int, 0);
pub const CBT_LINEAR_AXIS_Y = @as(c_int, 1);
pub const CBT_LINEAR_AXIS_Z = @as(c_int, 2);
pub const CBT_ANGULAR_AXIS_X = @as(c_int, 3);
pub const CBT_ANGULAR_AXIS_Y = @as(c_int, 4);
pub const CBT_ANGULAR_AXIS_Z = @as(c_int, 5);
pub const CBT_ROTATE_ORDER_XYZ = @as(c_int, 0);
pub const CBT_ROTATE_ORDER_XZY = @as(c_int, 1);
pub const CBT_ROTATE_ORDER_YXZ = @as(c_int, 2);
pub const CBT_ROTATE_ORDER_YZX = @as(c_int, 3);
pub const CBT_ROTATE_ORDER_ZXY = @as(c_int, 4);
pub const CBT_ROTATE_ORDER_ZYX = @as(c_int, 5);
